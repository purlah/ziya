diff --git a/app/middleware/streaming.py b/app/middleware/streaming.py
index 0d9e8d3..f7e9c7f 100644
--- a/app/middleware/streaming.py
+++ b/app/middleware/streaming.py
@@ -1,6 +1,10 @@
 class StreamingMiddleware:
     """Middleware for handling streaming responses."""
     
+    # Class-level variables for repetition detection
+    _recent_lines = []
+    _max_repetitions = 10
+    
     def __init__(self, app):
         super().__init__(app)
     
@@ -8,6 +12,10 @@ class StreamingMiddleware:
         # For non-streaming requests, just pass through
         return await call_next(request)
     
+    def _is_repetitive(self, content: str) -> bool:
+        """Check if content contains repetitive lines that exceed threshold."""
+        return any(content.count(line) > self._max_repetitions for line in set(content.split('\n')) if line.strip())
+    
     async def safe_stream(self, original_iterator):
         """
         Safely process a stream of chunks.
@@ -17,12 +25,16 @@ class StreamingMiddleware:
         Yields:
             Processed chunks as SSE data
         """
+        # Reset repetition detection state for this stream
+        self._recent_lines = []
+        accumulated_content = ""
         try:
             async for chunk in original_iterator:
                 # Log chunk info for debugging
                 
                 thinking_mode_enabled = False
                 
+                chunk_content = ""
                 # Process the chunk
                 try:
                     # Handle AIMessageChunk objects
                     if hasattr(chunk, 'content'):
                         raw_content = chunk.content
                         
+                        chunk_content = raw_content
+                        
                         # Check if this might be thinking mode content
                         is_structured = isinstance(raw_content, dict)
                         
                         if is_structured:
                             # For structured content like thinking mode, preserve the structure
                             yield f"data: {raw_content}\n\n"
+                            chunk_content = str(raw_content)
                         else:
                             # For simple string content
                             content = str(raw_content)
                             yield f"data: {content}\n\n"
@@ -31,6 +43,7 @@ class StreamingMiddleware:
                         if hasattr(chunk.message, 'content'):
                             content = chunk.message.content
                             if content:
+                                chunk_content = content
                                 if isinstance(content, dict):
                                     # Preserve structured content
                                     yield f"data: {content}\n\n"
@@ -40,8 +53,32 @@ class StreamingMiddleware:
                     # Last resort: convert to string
                     str_chunk = str(chunk)
+                    chunk_content = str_chunk
                     if str_chunk: # Avoid empty data chunks
-                        yield f"data: {str_chunk}\n\n"
+                        # Check for repetitive content
+                        accumulated_content += str_chunk
+                        
+                        # Track lines for repetition detection
+                        lines = str_chunk.split('\n')
+                        for line in lines:
+                            if line.strip():  # Only track non-empty lines
+                                self._recent_lines.append(line)
+                                # Keep only recent lines
+                                if len(self._recent_lines) > 100:
+                                    self._recent_lines.pop(0)
+                        
+                        # Check if any line repeats too many times
+                        if any(self._recent_lines.count(line) > self._max_repetitions for line in set(self._recent_lines)):
+                            print("Detected repetitive content in stream, interrupting")
+                            # Send warning message
+                            warning_msg = {
+                                "warning": "repetitive_content",
+                                "detail": "Response was interrupted because repetitive content was detected."
+                            }
+                            yield f"data: {warning_msg}\n\n"
+                            yield "data: [DONE]\n\n"
+                            return
+                        else:
+                            yield f"data: {str_chunk}\n\n"
                     
                 except Exception as chunk_error:
                     print(f"Error processing chunk: {str(chunk_error)}")
