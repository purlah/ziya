"""
Middleware for handling streaming responses and errors.
"""

import json
from typing import AsyncIterator, Any
from fastapi import Request
from starlette.middleware.base import BaseHTTPMiddleware, RequestResponseEndpoint
from starlette.responses import StreamingResponse, Response
from starlette.types import ASGIApp
from langchain_core.outputs import ChatGeneration
from langchain_core.messages import AIMessageChunk
from langchain_core.tracers.log_stream import RunLogPatch

from app.utils.logging_utils import logger

class StreamingMiddleware(BaseHTTPMiddleware):
    """Middleware for handling streaming responses."""
    
    def __init__(self, app: ASGIApp):
        super().__init__(app)
    
    async def dispatch(
        self, request: Request, call_next: RequestResponseEndpoint
    ) -> Response:
        """Handle streaming responses."""
        # Check if this is a streaming request
        is_streaming = False
        for key, value in request.headers.items():
            if key.lower() == "accept" and "text/event-stream" in value.lower():
                is_streaming = True
                break
        
        # If this is a streaming request, we need to handle it specially
        if is_streaming and "/ziya/stream" in request.url.path:
            logger.info(f"Detected streaming request to {request.url.path}")
            # For streaming requests, we need to modify the response
            response = await call_next(request)
            
            if isinstance(response, StreamingResponse):
                # Replace the body iterator with our safe stream
                original_iterator = response.body_iterator
                response.body_iterator = self.safe_stream(original_iterator)
                logger.info("Applied safe_stream to streaming response")
            
            return response
        else:
            # For non-streaming requests, just pass through
            return await call_next(request)
    
    async def safe_stream(self, original_iterator: AsyncIterator[Any]) -> AsyncIterator[str]:
        """
        Safely process a stream of chunks.
        
        Args:
            original_iterator: The original stream iterator
            
        Yields:
            Processed chunks as SSE data
        """
        try:
            async for chunk in original_iterator:
                # Log chunk info for debugging
                logger.info("=== AGENT astream received chunk ===")
                logger.info(f"Chunk type: {type(chunk)}")
                
                # Process the chunk
                try:
                    # Check if chunk is already a Gemini error response
                    if isinstance(chunk, str) and chunk.startswith('data: {"error"'):
                        yield chunk
                        continue

                    # Handle AIMessageChunk objects
                    if isinstance(chunk, AIMessageChunk):
                        logger.info("Processing AIMessageChunk")
                        content = chunk.content

                        # Check if content is an error message
                        if isinstance(content, str) and content.startswith('data: {"error"'):
                            yield content
                            continue
                        
                        yield f"data: {content}\n\n"
                        continue
                    
                    # Handle None chunks
                    if chunk is None:
                        logger.info("Skipping None chunk")
                        continue
                    
                    # Handle ChatGeneration objects
                    if isinstance(chunk, ChatGeneration):
                        logger.info("Processing ChatGeneration")
                        if hasattr(chunk, 'message'):
                            content = chunk.message.content
                            yield f"data: {content}\n\n"
                            continue
                    
                    # Handle RunLogPatch objects - convert to SSE data
                    if isinstance(chunk, RunLogPatch) or (hasattr(chunk, '__class__') and chunk.__class__.__name__ == 'RunLogPatch'):
                        logger.info(f"Processing RunLogPatch")
                        # Extract content from RunLogPatch if possible
                        if hasattr(chunk, 'ops') and chunk.ops:
                            for op in chunk.ops:
                                if op.get('op') == 'add' and 'value' in op and 'content' in op['value']:
                                    content = op['value']['content']
                                    yield f"data: {content}\n\n"
                                    continue
                        # If we couldn't extract content, skip this chunk
                        continue
                    
                    # Handle string chunks
                    if isinstance(chunk, str):
                        logger.info("Processing string chunk")
                        # Check if it's already an SSE message
                        if chunk.startswith('data:'):
                            yield chunk
                        else:
                            yield f"data: {chunk}\n\n"
                        

                        # Log chunk content preview
                        if len(chunk) > 200:
                            logger.info(f"String chunk preview:\n{chunk[:200]}...")
                            logger.info(f"...and ends with:\n{chunk[-200:]}")
                        else:
                            logger.info(f"Full string chunk:\n{chunk}")
                        continue
                    
                    # If we get here, try to extract content from the chunk
                    if hasattr(chunk, 'content'):
                        logger.info("Extracting content from chunk")
                        content = chunk.content
                        if callable(content):
                            logger.info("Content is callable, executing")
                            logger.info(f"Executed content preview:\n{str(content)[:200]}...")
                            content = content()
                        yield f"data: {content}\n\n"
                        continue
                    
                    # Last resort: convert to string
                    logger.info("Converting chunk to string")
                    yield f"data: {str(chunk)}\n\n"
                    
                except Exception as chunk_error:
                    logger.error(f"Error processing chunk: {str(chunk_error)}")
                    error_msg = f"Error processing response: {str(chunk_error)}"
                    yield f"data: {error_msg}\n\n"
                    continue
                    
            # Send the [DONE] marker
            yield "data: [DONE]\n\n"
            
        except Exception as e:
            logger.error(f"Error in safe_stream: {str(e)}")
            error_msg = {"error": "server_error", "detail": str(e), "status_code": 500}
            yield f"data: {json.dumps(error_msg)}\n\n"
            yield "data: [DONE]\n\n"
