diff --git a/frontend/src/plugins/d3/basicChart.ts b/frontend/src/plugins/d3/basicChart.ts
--- a/frontend/src/plugins/d3/basicChart.ts
+++ b/frontend/src/plugins/d3/basicChart.ts
@@ -35,7 +35,12 @@ export const basicChartPlugin: D3RenderPlugin = {
     name: 'basic-chart',
     priority: 10, // Higher priority than network diagram
-    canHandle: (spec: any) => spec.type === 'chart' && spec.chartType === 'bar',
+    canHandle: (spec: any) => {
+        return (
+            typeof spec === 'object' &&
+            (spec.type === 'bar' || spec.type === 'line' || spec.type === 'scatter' || spec.type === 'bubble')
+        );
+    },
     render: (container: HTMLElement, d3: any, spec: any) => {
         console.debug('Basic chart plugin rendering:', spec);
 
@@ -43,9 +48,9 @@ export const basicChartPlugin: D3RenderPlugin = {
             // Clear any existing content
             d3.select(container).selectAll('*').remove();
             
-            const margin = spec.options?.margin || defaultMargin;
-            const width = (spec.options?.width || 600) - margin.left - margin.right;
-            const height = (spec.options?.height || 400) - margin.top - margin.bottom;
+            const margin = spec.margin || defaultMargin;
+            const width = (spec.width || 600) - margin.left - margin.right;
+            const height = (spec.height || 400) - margin.top - margin.bottom;
 
             // Create SVG
             const svg = d3.select(container)
@@ -55,6 +60,8 @@ export const basicChartPlugin: D3RenderPlugin = {
                 .append('g')
                 .attr('transform', `translate(${margin.left},${margin.top})`);
 
+            const data = Array.isArray(spec.data) ? spec.data : [];
+
             // Create scales
             const x = d3.scaleBand()
                 .range([0, width])
@@ -74,15 +81,43 @@ export const basicChartPlugin: D3RenderPlugin = {
                 .attr('transform', `translate(0,${height})`)
                 .call(d3.axisBottom(x));
 
-            // Add bars
-            svg.selectAll('rect')
-                .data(spec.data)
-                .join('rect')
-                .attr('x', (d: any) => x(d.label))
-                .attr('y', (d: any) => y(d.value))
-                .attr('width', x.bandwidth())
-                .attr('height', (d: any) => height - y(d.value))
-                .attr('fill', 'steelblue');
+            if (spec.type === 'bar') {
+                // Add bars
+                svg.selectAll('rect')
+                    .data(data)
+                    .join('rect')
+                    .attr('x', (d: any) => x(d.label))
+                    .attr('y', (d: any) => y(d.value))
+                    .attr('width', x.bandwidth())
+                    .attr('height', (d: any) => height - y(d.value))
+                    .attr('fill', (d: any) => d.color || 'steelblue');
+            } else if (spec.type === 'line' || spec.type === 'scatter') {
+                // Create line generator
+                const line = d3.line()
+                    .x((d: any) => x(d.label) + x.bandwidth() / 2)
+                    .y((d: any) => y(d.value));
+
+                if (spec.type === 'line') {
+                    // Add line
+                    svg.append('path')
+                        .datum(data)
+                        .attr('fill', 'none')
+                        .attr('stroke', 'steelblue')
+                        .attr('stroke-width', 2)
+                        .attr('d', line);
+                }
+
+                // Add points
+                svg.selectAll('circle')
+                    .data(data)
+                    .join('circle')
+                    .attr('cx', (d: any) => x(d.label) + x.bandwidth() / 2)
+                    .attr('cy', (d: any) => y(d.value))
+                    .attr('r', spec.type === 'bubble' ? (d: any) => d.size || 5 : 4)
+                    .attr('fill', (d: any) => d.color || 'steelblue')
+                    .attr('stroke', '#fff')
+                    .attr('stroke-width', 1);
+            }
+
         } catch (error) {
             console.error('Basic chart render error:', error);
             throw error;
